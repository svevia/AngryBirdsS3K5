class Visualisateur
!!!137349.java!!!	drawOiseau(inout g : Graphics) : Graphics
        g = bird.draw(new Skin(g)).getG();
        return g;
!!!137477.java!!!	drawFootstep(inout full : boolean, in part : int, in tailleVerticale : int, in tailleHorizontale : int, inout g : Graphics) : Graphics
        if (full) {
            g = footstep.drawAllFootstep(tailleVerticale, tailleHorizontale, g);
        } else {
            g = footstep.drawFootstep(part, tailleVerticale, tailleHorizontale, g);
        }
        return g;
!!!137605.java!!!	drawObstacle(inout g : Graphics) : Graphics
        for (int i = 0; i < obstacle.size(); i++) {
            g = obstacle.get(i).draw(new Skin(g)).getG();
        }
        return g;
!!!137733.java!!!	drawFond(inout g : Graphics) : Graphics
        for (int i = 0; i < fond.size(); i++) {
            g.drawImage(fond.get(i).getImage(), fond.get(i).getPosX(), fond.get(i).getPosY(), null);
        }
        return g;
!!!137861.java!!!	drawAllNeed(inout g : Graphics) : Graphics
        g = drawFond(g);
        g = drawFootstep(true, calculTraceFootStep(), 3, (int) vitesse + 3, g);
        g = drawOiseau(g);
        g = drawObstacle(g);
        return g;
!!!137989.java!!!	calculTraceFootStep() : int
        //Si jamais on a un x/0 on cale un finally ici
        try {
            return (100 / ((int) vitesse + 1)) + 10;
        } finally {
            return (100 / ((int) vitesse + 2)) + 10;
        }
!!!138117.java!!!	drawHitBox(inout e : Entity, inout g : Graphics, inout c : Color) : Graphics
        g.setColor(c);
        g.drawRect(e.getHb().x, e.getHb().y, e.getHb().w, e.getHb().h);
        return g;
!!!138245.java!!!	drawAllHitBox(inout g : Graphics) : Graphics
        for (int i = 0; i < obstacle.size(); i++) {
            g = drawHitBox(obstacle.get(i), g, Color.black);
        }
        g = drawHitBox(bird, g, Color.red);
        return g;
!!!138373.java!!!	drawCurve(inout g : Graphics, inout c : Courbe) : Graphics
        if (c != null) {
            int x, y, t = 0;
            do {
                t++;
                x = (int) c.getXenT(t);
                y = (int) c.getYenT(t);
                g.fillOval(x, y, 3, 3);
            } while (x < fenetre.width && x > 0 && y < fenetre.height && y > 0);
        }
        return g;
